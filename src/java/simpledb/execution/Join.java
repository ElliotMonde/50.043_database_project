package simpledb.execution;

import simpledb.transaction.TransactionAbortedException;
import simpledb.common.DbException;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    private JoinPredicate joinPredicate;
    private OpIterator child1;
    private OpIterator child2;
    private TupleDesc tupleDesc;
    private Tuple currentTuple1;    
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        this.joinPredicate = p;
        this.child1 = child1;
        this.child2 = child2;
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        // some code goes here
    }

    public JoinPredicate getJoinPredicate() {
        return joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        return child1.getTupleDesc().getFieldName(joinPredicate.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(joinPredicate.getField2());
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
                super.open();
                child1.open();
                child2.open();
                currentTuple1 = null;
        // some code goes here
    }

    public void close() {
        super.close();
        child1.close();
        child2.close();
        currentTuple1 = null;
        // some code goes here
    }

    public void rewind() throws DbException, TransactionAbortedException {
        child1.rewind();
        child2.rewind();
        currentTuple1 = null;
        // some code goes here
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        while (true) {
            if (currentTuple1 == null) {
                if (!child1.hasNext()) {
                    return null; // No more tuples in child1
                }
                currentTuple1 = child1.next();
                child2.rewind(); // Reset child2 for each new tuple in child1
            }

            while (child2.hasNext()) {
                Tuple currentTuple2 = child2.next();
                if (joinPredicate.filter(currentTuple1, currentTuple2)) {
                    return mergeTuples(currentTuple1, currentTuple2);
                }
            }

            currentTuple1 = null; // Move to the next tuple in child1
        }
    }

    private Tuple mergeTuples(Tuple tuple1, Tuple tuple2) {
        Tuple mergedTuple = new Tuple(tupleDesc);
        int numFields1 = tuple1.getTupleDesc().numFields();
        int numFields2 = tuple2.getTupleDesc().numFields();

        for (int i = 0; i < numFields1; i++) {
            mergedTuple.setField(i, tuple1.getField(i));
        }
        for (int i = 0; i < numFields2; i++) {
            mergedTuple.setField(numFields1 + i, tuple2.getField(i));
        }

        return mergedTuple;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        return new OpIterator[] { child1, child2 };  
    }

    @Override
    public void setChildren(OpIterator[] children) {
        if (children.length != 2) {
            throw new IllegalArgumentException("Join operator expects exactly two children.");
        }
        this.child1 = children[0];
        this.child2 = children[1];
        this.tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }
        // some code goes here
}
